version: 2.1

executors:
  python-executor:
    docker:
      - image: cimg/python:3.11  
    working_directory: ~/repo

commands:
  setup-environment:
    steps:
      - checkout
      - run:
          name: Install UV using curl
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
      - run:
          name: Install Project Dependencies
          command: |
            uv venv
            # Install root project dependencies
            uv add -e ".[dev]"
            # Install component dependencies
            cd src/calculator && uv pip install -e ".[dev]"
            cd ../logger && uv pip install -e ".[dev]"
            cd ../notifier && uv pip install -e ".[dev]"
            cd ../..
            # Install additional dev dependencies for type checking
            uv pip install types-setuptools>=42.0.0

jobs:
  lint-and-static-analysis:
    executor: python-executor
    steps:
      - setup-environment
      - run:
          name: Run Ruff (Code Formatting and Linting)
          command: |
            uv run ruff check src tests
      - run:
          name: Run Mypy (Static Type Checking)
          command: |
            uv run mypy src

  test-successful:
    executor: python-executor
    steps:
      - setup-environment
      - run:
          name: Run Successful Tests
          command: |
            mkdir -p test-results/pytest/successful
            # Run tests for successful cases only
            uv run pytest \
              --junitxml=test-results/pytest/successful/junit.xml \
              --html=test-results/successful-report.html \
              --self-contained-html \
              src/calculator/test_calculator.py \
              src/logger/test_logger.py \
              src/notifier/test_notifier.py \
              tests/integration \
              tests/end_to_end
      - store_test_results:
          path: test-results/pytest/successful
      - store_artifacts:
          path: test-results/successful-report.html

  test-expected-failures:
    executor: python-executor
    steps:
      - setup-environment
      - run:
          name: Run Expected Failure Tests
          command: |
            mkdir -p test-results/pytest/failures
            # Run tests specifically designed to fail or handle edge cases
            uv run pytest \
              --junitxml=test-results/pytest/failures/junit.xml \
              --html=test-results/failure-report.html \
              --self-contained-html \
              src/calculator/test_calculator_failures.py 
      - store_test_results:
          path: test-results/pytest/failures
      - store_artifacts:
          path: test-results/failure-report.html

  coverage:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup-environment
      - run:
          name: Generate Coverage Reports
          command: |
            # Generate coverage reports for all tests combined
            uv run pytest \
              --cov=src \
              --cov-report=html \
              --cov-report=xml \
              --cov-report=term-missing
      - store_artifacts:
          path: htmlcov
          destination: coverage-html-report
      - store_artifacts:
          path: coverage.xml

workflows:
  main:
    jobs:
      - lint-and-static-analysis
      - test-successful
      - test-expected-failures:
          requires:
            - test-successful
      - coverage:
          requires:
            - test-successful
